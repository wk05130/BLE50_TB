/////////////////////////////////////////////////////////////////////
////                                                             ////
////  Test Case Collection                                       ////
////                                                             ////
////                                                             ////
////  Author: Rudolf Usselmann                                   ////
////          rudi@asics.ws                                      ////
////                                                             ////
////                                                             ////
////  Downloaded from: http://www.opencores.org/cores/usb1_funct/////
////                                                             ////
/////////////////////////////////////////////////////////////////////
////                                                             ////
//// Copyright (C) 2000-2002 Rudolf Usselmann                    ////
////                         www.asics.ws                        ////
////                         rudi@asics.ws                       ////
////                                                             ////
//// This source file may be used and distributed without        ////
//// restriction provided that this copyright statement is not   ////
//// removed from the file and that any derivative work contains ////
//// the original copyright notice and the associated disclaimer.////
////                                                             ////
////     THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY     ////
//// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   ////
//// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS   ////
//// FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL THE AUTHOR      ////
//// OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,         ////
//// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES    ////
//// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE   ////
//// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR        ////
//// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  ////
//// LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT  ////
//// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  ////
//// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE         ////
//// POSSIBILITY OF SUCH DAMAGE.                                 ////
////                                                             ////
/////////////////////////////////////////////////////////////////////

//  CVS Log
//
//  $Id: tests.v,v 1.1 2002-09-25 06:10:10 rudi Exp $
//
//  $Date: 2002-09-25 06:10:10 $
//  $Revision: 1.1 $
//  $Author: rudi $
//  $Locker:  $
//  $State: Exp $
//
// Change History:
//               $Log: not supported by cvs2svn $
//
//
//
//
//
//


task send_setup;
input	[7:0]	fa;
input	[7:0]	req_type;
input	[7:0]	request;
input	[15:0]	wValue;
input	[15:0]	wIndex;
input	[15:0]	wLength;

integer		len;
begin

buffer1[0] = req_type;
buffer1[1] = request;
buffer1[3] = wValue[15:8];
buffer1[2] = wValue[7:0];
buffer1[5] = wIndex[15:8];
buffer1[4] = wIndex[7:0];
buffer1[7] = wLength[15:8];
buffer1[6] = wLength[7:0];

buffer1_last = 0;
send_token(	fa,			// Function Address
		0,			// Logical Endpoint Number
		`USBF_T_PID_SETUP	// PID
		);

repeat(1)	@(posedge usb_phy_clk);

send_data(`USBF_T_PID_DATA0, 8, 1);

// Wait for ACK
utmi_recv_pack(len);

if(8'hd2 !== txmem[0])
   begin
	$display("ERROR: SETUP: ACK mismatch. Expected: %h, Got: %h (%t)",
	8'hd2, txmem[0], $time);
	error_cnt = error_cnt + 1;
   end

if(len !== 1)
   begin
	$display("ERROR: SETUP: Length mismatch. Expected: %h, Got: %h (%t)",
	8'h1, len, $time);
	error_cnt = error_cnt + 1;
   end

repeat(1)	@(posedge usb_phy_clk);
setup_pid = 1;
repeat(1)	@(posedge usb_phy_clk);
end

endtask


task send_setup_new;
input	[7:0]	fa;
input	[7:0]	req_type;
input	[7:0]	request;
input	[15:0]	wValue;
input	[15:0]	wIndex;
input	[15:0]	wLength;
output	[3:0]	pid;
integer		len;
begin

buffer1[0] = req_type;
buffer1[1] = request;
buffer1[3] = wValue[15:8];
buffer1[2] = wValue[7:0];
buffer1[5] = wIndex[15:8];
buffer1[4] = wIndex[7:0];
buffer1[7] = wLength[15:8];
buffer1[6] = wLength[7:0];

buffer1_last = 0;
send_token(	fa,			// Function Address
		0,			// Logical Endpoint Number
		`USBF_T_PID_SETUP	// PID
		);

repeat(1)	@(posedge usb_phy_clk);

send_data(`USBF_T_PID_DATA0, 8, 1);

// Wait for ACK
utmi_recv_pack(len);

if(8'hd2 !== txmem[0])
   begin
	$display("WARN: SETUP: ACK mismatch. Expected: %h, Got: %h (%t)",
	8'hd2, txmem[0], $time);
	//error_cnt = error_cnt + 1;
    pid = txmem[0][3:0];
   end
   else
   begin
    pid = 2;
   end

if(len !== 1)
   begin
	$display("ERROR: SETUP: Length mismatch. Expected: %h, Got: %h (%t)",
	8'h1, len, $time);
	error_cnt = error_cnt + 1;
   end

repeat(1)	@(posedge usb_phy_clk);
setup_pid = 1;
repeat(1)	@(posedge usb_phy_clk);
end

endtask

task data_in;
input	[7:0]	fa;
input	[7:0]	pl_size;

integer		rlen;
reg	[3:0]	pid, expect_pid;
begin

	buffer1_last = 0;
	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			0,		// Logical Endpoint Number
			`USBF_T_PID_IN	// PID
			);

	recv_packet(pid,rlen);
	if(setup_pid)	expect_pid = 4'hb; // DATA 1
	else		    expect_pid = 4'h3; // DATA 0

	if (pid == `USBF_T_PID_NACK)
    begin
        $display("WARNING: Data IN REV NACK. Expected: %h, Got: %h (%t)",       
        	expect_pid, pid, $time);
        error_cnt = error_cnt + 1;
    end
    else if(pid !== expect_pid)
	begin
		$display("ERROR: Data IN PID mismatch. Expected: %h, Got: %h (%t)",
			expect_pid, pid, $time);
		error_cnt = error_cnt + 1;
	end

	setup_pid = ~setup_pid;
	if(rlen != pl_size)
	   begin
		$display("ERROR: Data IN Size mismatch. Expected: %d, Got: %d (%t)",
			pl_size, rlen, $time);
		error_cnt = error_cnt + 1;
	   end

	for(n=0;n<rlen;n=n+1)
		$display("RCV Data[%0d]: %h",n,buffer1[n]);

	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			0,		// Logical Endpoint Number
			`USBF_T_PID_ACK	// PID
			);

	repeat(5)	@(posedge usb_phy_clk);

end
endtask


task data_in_new;
input	[7:0]	fa;
input	[7:0]	pl_size;
output	[3:0]	o_pid;
integer		rlen;
reg	[3:0]	pid, expect_pid;


begin

	buffer1_last = 0;
	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			0,		// Logical Endpoint Number
			`USBF_T_PID_IN	// PID
			);

	recv_packet_new(pid,rlen);
	if(setup_pid)	expect_pid = 4'hb; // DATA 1
	else		    expect_pid = 4'h3; // DATA 0

	if (pid == `USBF_T_PID_NACK)
    begin
        $display("WARNING: Data IN REV NACK. Expected: %h, Got: %h (%t)",       
        	expect_pid, pid, $time);
        o_pid = pid;
        return;
    end
    else if (pid == `USBF_T_PID_STALL)                                                   
    begin
        $display("WARNING: Data IN REV STALL. Expected: %h, Got: %h (%t)",       
        	expect_pid, pid, $time);
        o_pid = pid;
        return;
    end
    else if(pid !== expect_pid)
	begin
		$display("ERROR: Data IN PID mismatch. Expected: %h, Got: %h (%t)",
			expect_pid, pid, $time);
		error_cnt = error_cnt + 1;
	end

	setup_pid = ~setup_pid;
	if(rlen != pl_size)
	   begin
		$display("ERROR: Data IN Size mismatch. Expected: %d, Got: %d (%t)",
			pl_size, rlen, $time);
		error_cnt = error_cnt + 1;
	   end

	for(n=0;n<rlen;n=n+1)
		$display("RCV Data[%0d]: %h",n,buffer1[n]);

	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			0,		// Logical Endpoint Number
			`USBF_T_PID_ACK	// PID
			);

	repeat(5)	@(posedge usb_phy_clk);
    o_pid = pid;
end
endtask

task data_in_ep;
input	[7:0]	fa;
input	[7:0]	pl_size;
input	[7:0]	ep_numb;
integer		rlen;
reg	[3:0]	pid, expect_pid;
begin

	buffer1_last = 0;
	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			    ep_numb,		// Logical Endpoint Number
			    `USBF_T_PID_IN	// PID
			    );

	recv_packet(pid,rlen);
	if(setup_pid)	expect_pid = 4'hb; // DATA 1
	else		    expect_pid = 4'h3; // DATA 0

	if(pid !== expect_pid)
	   begin
		$display("ERROR: Data IN PID mismatch. Expected: %h, Got: %h (%t)",
			expect_pid, pid, $time);
		error_cnt = error_cnt + 1;
	   end

	setup_pid = ~setup_pid;
	if(rlen != pl_size)
	   begin
		$display("ERROR: Data IN Size mismatch. Expected: %d, Got: %d (%t)",
			pl_size, rlen, $time);
		error_cnt = error_cnt + 1;
	   end

	for(n=0;n<rlen;n=n+1)
		$display("RCV Data[%0d]: %h",n,buffer1[n]);

	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			    ep_numb,		// Logical Endpoint Number
			    `USBF_T_PID_ACK	// PID
			  );

	repeat(5)	@(posedge usb_phy_clk);

end
endtask

task data_in_ep_new;
input	[7:0]	fa;
input	[7:0]	pl_size;
input	[7:0]	ep_numb;
integer		rlen;
reg	[3:0]	pid, expect_pid;
output	[3:0]	o_pid;
begin

	buffer1_last = 0;
	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			    ep_numb,		// Logical Endpoint Number
			    `USBF_T_PID_IN	// PID
			    );

	recv_packet_new(pid,rlen);
	if(setup_pid)	expect_pid = 4'hb; // DATA 1
	else		    expect_pid = 4'h3; // DATA 0

    if (pid == `USBF_T_PID_NACK)
    begin
        $display("WARNING: Data IN REV NACK. Expected: %h, Got: %h (%t)",       
        	expect_pid, pid, $time);
        o_pid = pid;
        return;
    end
    else if (pid == `USBF_T_PID_STALL)                                                   
    begin
        $display("WARNING: Data IN REV STALL. Expected: %h, Got: %h (%t)",       
        	expect_pid, pid, $time);
        o_pid = pid;
        return;
    end
	else if(pid !== expect_pid)
	   begin
		$display("ERROR: Data IN PID mismatch. Expected: %h, Got: %h (%t)",
			expect_pid, pid, $time);
		error_cnt = error_cnt + 1;
	   end

	setup_pid = ~setup_pid;
	if(rlen != pl_size)
	   begin
		$display("ERROR: Data IN Size mismatch. Expected: %d, Got: %d (%t)",
			pl_size, rlen, $time);
		error_cnt = error_cnt + 1;
	   end

	for(n=0;n<rlen;n=n+1)
		$display("RCV Data[%0d]: %h",n,buffer1[n]);

	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			    ep_numb,		// Logical Endpoint Number
			    `USBF_T_PID_ACK	// PID
			  );

	repeat(5)	@(posedge usb_phy_clk);
    o_pid = pid;
end
endtask

task data_out;
input	[7:0]	fa;
input	[7:0]	pl_size;

integer len;

begin
	send_token(	fa,		// Function Address
			0,		// Logical Endpoint Number
			`USBF_T_PID_OUT	// PID
			);

	repeat(1)	@(posedge usb_phy_clk);

	if(setup_pid==0)	send_data(`USBF_T_PID_DATA0, pl_size, 1);
	else			send_data(`USBF_T_PID_DATA1, pl_size, 1);

	setup_pid = ~setup_pid;

	// Wait for ACK
	utmi_recv_pack(len);

	if(8'hd2 !== txmem[0])
	   begin
		$display("ERROR: ACK mismatch. Expected: %h, Got: %h (%t)",
		8'hd2, txmem[0], $time);
		error_cnt = error_cnt + 1;
	   end

	if(len !== 1)
	   begin
		$display("ERROR: SETUP: Length mismatch. Expected: %h, Got: %h (%t)",
		8'h1, len, $time);
		error_cnt = error_cnt + 1;
	   end
	repeat(5)	@(posedge usb_phy_clk);

end
endtask

task data_out_buffer;
input	[7:0]	fa;
input	[7:0]	pl_size;
input   [7:0]   bufffer0;
input   [7:0]   bufffer1;
input   [7:0]   bufffer2;
input   [7:0]   bufffer3;
input   [7:0]   bufffer4;
input   [7:0]   bufffer5;
input   [7:0]   bufffer6;

integer len;

begin
	send_token(	fa,		// Function Address
			    0,		// Logical Endpoint Number
			    `USBF_T_PID_OUT	// PID
			  );

	repeat(1)	@(posedge usb_phy_clk);

    buffer1[0] = bufffer0;
    buffer1[1] = bufffer1;
    buffer1[2] = bufffer2;
    buffer1[3] = bufffer3;
    buffer1[4] = bufffer4;
    buffer1[5] = bufffer5;
    buffer1[6] = bufffer6;
    buffer1_last = 0;
	if(setup_pid==0)	send_data(`USBF_T_PID_DATA0, pl_size, 1);
	else			send_data(`USBF_T_PID_DATA1, pl_size, 1);

	setup_pid = ~setup_pid;

	// Wait for ACK
	utmi_recv_pack(len);

	if(8'hd2 !== txmem[0])
	   begin
		$display("ERROR: ACK mismatch. Expected: %h, Got: %h (%t)",
		8'hd2, txmem[0], $time);
		error_cnt = error_cnt + 1;
	   end

	if(len !== 1)
	   begin
		$display("ERROR: SETUP: Length mismatch. Expected: %h, Got: %h (%t)",
		8'h1, len, $time);
		error_cnt = error_cnt + 1;
	   end
	repeat(5)	@(posedge usb_phy_clk);

end
endtask

task set_cbw;
//CBW[0] = operation_code;




endtask












































































































parameter	GET_STATUS	        =	8'h0,
		    CLEAR_FEATURE	    =	8'h1,
		    SET_FEATURE	        =	8'h3,
		    SET_ADDRESS	        =	8'h5,
		    GET_DESCRIPTOR	    =	8'h6,
		    SET_DESCRIPTOR	    =	8'h7,
		    GET_CONFIG	        =	8'h8,
		    SET_CONFIG	        =	8'h9,
		    GET_INTERFACE	    =	8'ha,
		    SET_INTERFACE	    =	8'hb,
            SET_LINE_CODING	    =	8'h20,
            GET_LINE_CODING	    =	8'h21,
            SET_CTRL_LINE_STATE =	8'h22,           
            SYNCH_FRAME	        =	8'hc,
            GET_MAX_LUN	        =	8'hfe,
            BULK_ONLY_MASS_STORAGE_RESET	        =	8'hff;

task setup1;

begin
$display("\n\n");
$display("*****************************************************");
$display("*** CTRL ep test 1                                ***");
$display("*****************************************************\n");


$display("\n\nSetting Address ...");

send_setup(	8'h0, 		// Function Address
		8'h00,		// Request Type
		SET_ADDRESS,	// Request
		16'h012,	// wValue
		16'h0,		// wIndex
		16'h0		// wLength
		);

// Status OK
data_in(	8'h0,		// Function Address
		8'h0		// Expected payload size
	);


$display("\n\nGetting descriptor (Device)...");
send_setup(	8'h12, 		// Function Address
		8'h80,		// Request Type
		GET_DESCRIPTOR,	// Request
		16'h0100,	// wValue
		16'h0,		// wIndex
		16'h8		// wLength
		);

data_in(	8'h12,		// Function Address
		8'd08		// Expected payload size
	);

// Status OK
data_out(	8'h12,		// Function Address
		8'h0		// Expected payload size
	);


$display("\n\nGetting descriptor(Configuration) ...");
send_setup(	8'h12, 		// Function Address
		8'h80,		// Request Type
		GET_DESCRIPTOR,	// Request
		16'h0200,	// wValue
		16'h0,		// wIndex
		16'h8		// wLength
		);

data_in(	8'h12,		// Function Address
		8'd08		// Expected payload size
	);

// Status OK
data_out(	8'h12,		// Function Address
		8'h0		// Expected payload size
	);

$display("\n\nGetting descriptor(53B Configuration&&Interface&&Endpoint) ...");
send_setup(	8'h12, 		// Function Address
		8'h80,		// Request Type
		GET_DESCRIPTOR,	// Request
		16'h0200,	// wValue
		16'h0,		// wIndex
		16'd053		// wLength
		);

data_in(	8'h12,		// Function Address
		8'd053		// Expected payload size
	);

// Status OK
data_out(	8'h12,		// Function Address
		8'h0		// Expected payload size
	);

$display("\n\nGetting descriptor ...");
send_setup(	8'h12, 		// Function Address
		8'h80,		// Request Type
		GET_DESCRIPTOR,	// Request
		16'h0300,	// wValue
		16'h0,		// wIndex
		16'd04		// wLength
		);

data_in(	8'h12,		// Function Address
		8'd04		// Expected payload size
	);

// Status OK
data_out(	8'h12,		// Function Address
		8'h0		// Expected payload size
	);

$display("\n\nGetting descriptor ...");
send_setup(	8'h12, 		// Function Address
		8'h80,		// Request Type
		GET_DESCRIPTOR,	// Request
		16'h0301,	// wValue
		16'h0,		// wIndex
		16'd010		// wLength
		);

data_in(	8'h12,		// Function Address
		8'd010		// Expected payload size
	);

// Status OK
data_out(	8'h12,		// Function Address
		8'h0		// Expected payload size
	);

$display("\n\nGetting descriptor ...");
send_setup(	8'h12, 		// Function Address
		8'h80,		// Request Type
		GET_DESCRIPTOR,	// Request
		16'h0302,	// wValue
		16'h0,		// wIndex
		16'd08		// wLength
		);

data_in(	8'h12,		// Function Address
		8'd08		// Expected payload size
	);

// Status OK
data_out(	8'h12,		// Function Address
		8'h0		// Expected payload size
	);

$display("\n\nGetting descriptor ...");
send_setup(	8'h12, 		// Function Address
		8'h80,		// Request Type
		GET_DESCRIPTOR,	// Request
		16'h0303,	// wValue
		16'h0,		// wIndex
		16'd016		// wLength
		);

data_in(	8'h12,		// Function Address
		8'd010		// Expected payload size
	);

// Status OK
data_out(	8'h12,		// Function Address
		8'h0		// Expected payload size
	);

$display("\n\nGetting descriptor ...");
send_setup(	8'h12, 		// Function Address
		8'h80,		// Request Type
		GET_DESCRIPTOR,	// Request
		16'h0203,	// wValue
		16'h0,		// wIndex
		16'd053		// wLength
		);

data_in(	8'h12,		// Function Address
		8'd053		// Expected payload size
	);

// Status OK
data_out(	8'h12,		// Function Address
		8'h0		// Expected payload size
	);

show_errors;
$display("*****************************************************");
$display("*** Test DONE ...                                 ***");
$display("*****************************************************\n\n");

end
endtask

//task in1;
//reg	[6:0]	my_fa;
//integer		quick, n, m, rlen,fc;
//reg	[7:0]	fd;
//integer		pack_cnt, pack_cnt_max;
//reg	[7:0]	x;
//reg	[3:0]	pid;
//reg	[3:0]	expect_pid;
//reg	[31:0]	data;
//reg		pid_cnt;
//
//
//begin
//$display("\n\n");
////$display("*****************************************************");
//$display("*** IN ep 1(BULK_IN_EP1)                     ***");
////$display("*****************************************************\n");
//
//
//send_sof(11'h000 );	// Send SOF
//
//pack_sz_max = 128;
//pack_cnt_max = 1;
//
//pid_cnt = 0;
//my_fa = 7'h12;
//pack_sz = pack_sz_max;
////for(pack_sz=0;pack_sz<pack_sz_max;pack_sz=pack_sz+1)
////begin
//
//$display("PL size: %0d", pack_sz);
//
//for(pack_cnt=0;pack_cnt<pack_cnt_max;pack_cnt=pack_cnt+1)
//   begin
//
//	// Fill Buffer
//	buffer1_last = 0;
//	for(fc=0;fc<pack_sz;fc=fc+1)
//	   begin
//		#2;
//		//while(ep1_f_full)	@(posedge clk);
//	
//		#1;
//		x = fc[7:0];
//		//x = $random;
//		ep1_f_din = x;
//		buffer0[fc] = x;
//		ep1_f_we = 1;
//		@(posedge clk);
//		#1;
//		ep1_f_we = 0;
//		@(posedge clk);
//	   end
//	#1;
//	ep1_f_we = 0;
//	@(posedge clk);
//
//	// Send Data
//	repeat(1)	@(posedge clk);
//	send_sof(11'h000 );	// Send SOF
//	repeat(1)	@(posedge clk);
//	send_token(	my_fa,		// Function Address
//			1,		// Logical Endpoint Number
//			`USBF_T_PID_IN	// PID
//			);
//
//	repeat(1)	@(posedge clk);
//
//	recv_packet(pid,rlen);
//
//	if(pid_cnt)	expect_pid = 4'hb;
//	else		expect_pid = 4'h3;
//	//expect_pid = 4'h3;
//
//	if(pid !== expect_pid)
//	   begin
//		$display("ERROR: PID mismatch. Expected: %h, Got: %h (%t)",
//			expect_pid, pid, $time);
//		error_cnt = error_cnt + 1;
//	   end
//	pid_cnt = ~pid_cnt;
//
//	if(rlen != pack_sz)
//	   begin
//		$display("ERROR: Size mismatch. Expected: %d, Got: %d (%t)",
//			pack_sz, rlen, $time);
//		error_cnt = error_cnt + 1;
//	   end
//
//	repeat(4)	@(posedge clk);
//	send_token(	my_fa,		// Function Address
//			1,		// Logical Endpoint Number
//			`USBF_T_PID_ACK	// PID
//			);
//	repeat(5)	@(posedge clk);
//
//	// Verify Data
//	for(fc=0;fc<pack_sz;fc=fc+1)
//	   begin
//		x =  buffer0[fc];
//		if( (buffer1[fc] !== x) | ( (^buffer1[fc] ^ ^x) === 1'hx) )
//		   begin
//			$display("ERROR: Data (%0d) mismatch. Expected: %h, Got: %h (%t)",
//			fc, buffer1[fc], x, $time);
//			error_cnt = error_cnt + 1;
//		   end
//	   end
//   end
//
//repeat(50)	@(posedge clk);
////end
//
//show_errors;
//$display("*****************************************************");
//$display("*** Test DONE ...                                 ***");
//$display("*****************************************************\n\n");
//
//end
//
//endtask
task data_in_buffer;
input	[7:0]	fa;
input	[7:0]	pl_size;
input   [7:0]   ep_num;
integer		rlen;
reg	[3:0]	pid, expect_pid;
begin

	buffer1_last = 0;
	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			    ep_num,		// Logical Endpoint Number
			    `USBF_T_PID_IN	// PID
			  );

	recv_packet(pid,rlen);
	if(setup_pid)	expect_pid = 4'hb; // DATA 1
	else		    expect_pid = 4'h3; // DATA 0

	if(pid !== expect_pid)
	   begin
		$display("ERROR: Data IN PID mismatch. Expected: %h, Got: %h (%t)",
			expect_pid, pid, $time);
		error_cnt = error_cnt + 1;
	   end

	setup_pid = ~setup_pid;
	if(rlen != pl_size)
	   begin
		$display("ERROR: Data IN Size mismatch. Expected: %d, Got: %d (%t)",
			pl_size, rlen, $time);
		error_cnt = error_cnt + 1;
	   end

	for(n=0;n<rlen;n=n+1)
		$display("RCV Data[%0d]: %h",n,buffer1[n]);

	repeat(5)	@(posedge usb_phy_clk);
	send_token(	fa,		// Function Address
			0,		// Logical Endpoint Number
			`USBF_T_PID_ACK	// PID
			);

	repeat(5)	@(posedge usb_phy_clk);

end
endtask

task setup_cdc;
reg             [ 6: 0] my_fa;
reg             [31: 0] data;
integer         len, n, no_pack, pl_sz;
integer         no_pack_max, pl_sz_max;
reg             pid;
reg	[3:0]	    o_pid;
reg             [ 7: 0] x;
integer         index_tmp;


begin
$display("\n\n");
$display("*****************************************************");
$display("*** CDC ENUMERATION  TEST                         ***");
$display("*****************************************************\n");
$display("\n\nGetting descriptor (Device)...");
index_tmp = 0;
send_setup_new(	8'h00, 		// Function Address
		        8'h80,		// Request Type
		        GET_DESCRIPTOR,	// Request
		        16'h0100,	// wValue
		        16'h0,		// wIndex
		        16'h12,		// wLength
                o_pid
		  );

$display("\n\o_pid(%h)...",o_pid);
if(o_pid==`USBF_T_PID_NACK)
begin
    send_setup_new(	8'h00, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0100,	// wValue
    		        16'h0,		// wIndex
    		        16'h12,		// wLength
                    o_pid
    		  );
end

if(o_pid==`USBF_T_PID_NACK)
begin
    send_setup_new(	8'h00, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0100,	// wValue
    		        16'h0,		// wIndex
    		        16'h12,		// wLength
                    o_pid
    		  );
end


if(o_pid==`USBF_T_PID_NACK)
begin
    send_setup_new(	8'h00, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0100,	// wValue
    		        16'h0,		// wIndex
    		        16'h12,		// wLength
                    o_pid
    		  );
end


if(o_pid==`USBF_T_PID_NACK)
begin
    send_setup_new(	8'h00, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0100,	// wValue
    		        16'h0,		// wIndex
    		        16'h12,		// wLength
                    o_pid
    		  );
end
o_pid=`USBF_T_PID_NACK;
repeat(20)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_new(	8'h00,		// Function Address
        		        8'd18,		// Expected payload size
                        o_pid
        	        );
    end
    else
    begin
        // Status OK
        data_out(	8'h00,		// Function Address
        		    8'h0		// Expected payload size
        	    );
        break;
    end
    index_tmp++;
end
$display("loop 1 finish (Host)...");
send_setup_new(	8'h00, 		// Function Address
		        8'h80,		// Request Type
		        GET_DESCRIPTOR,	// Request
		        16'h0100,	// wValue
		        16'h0,		// wIndex
		        16'h12,		// wLength
                o_pid
		  );
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;
repeat(20)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_new(	8'h00,		// Function Address
        		        8'd18,		// Expected payload size
                        o_pid
        	        );
    end
    else
    begin
        // Status OK
        data_out(	8'h00,		// Function Address
        		    8'h0		// Expected payload size
        	    );
        break;
    end
    index_tmp++;
end
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;




$display("\n\nSetting Address ...");

send_setup(	8'h0, 		// Function Address
		    8'h00,		// Request Type
		    SET_ADDRESS,	// Request
		    16'h07,	// wValue
		    16'h0,		// wIndex
		    16'h0		// wLength
		  );

o_pid=`USBF_T_PID_NACK;
index_tmp = 0;
repeat(20)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_new(	8'h00,		// Function Address
        		        8'd00,		// Expected payload size
                        o_pid
        	        );
    end
    else
    begin
        break;
    end
    index_tmp++;
end
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;

#100us;
//$display("\n\nGetting descriptor (Device)...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h0100,	// wValue
//		    16'h0,		// wIndex
//		    16'h12		// wLength
//		  );
//#7ms;
//data_in(	8'h07,		// Function Address
//		    8'd18		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//#4ms;
//$display("\n\nGetting descriptor(Configuration) ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h0200,	// wValue
//		    16'h0,		// wIndex
//		    16'h09		// wLength
//		    );
//#7ms;
//data_in(	8'h07,		// Function Address
//		    8'd09		// Expected payload size
//	);
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//#4ms;
//$display("\n\nGetting descriptor((9+9+5+5+4+5+7+9+7+7=)67B Configuration&&Interface&&hdr_fun&&call_mgmt_fun&&acm_fun&&union&&Endpoint) ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h0200,	// wValue
//		    16'h0,		// wIndex
//		    16'd64		// wLength
//		    );
//#14ms;
//data_in(	8'h07,		// Function Address
//		    8'd064		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//#4ms;
repeat(10)
begin
    $display("\n\nGetting dev_qualifier descriptor ...");
    send_setup_new(	8'h07, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0600,	// wValue
    		        16'h0,		// wIndex
    		        16'd10,		// wLength
                    o_pid
    		    );
    if(o_pid==`USBF_T_PID_STALL)
    begin
        $display("rececve STALL and soft not support");
    end
    else
    begin
        o_pid=`USBF_T_PID_NACK;       
        index_tmp = 0;
        repeat(20)                                                                 
        begin
            $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
            if(o_pid==`USBF_T_PID_NACK)
            begin
                data_in_new(	8'h07,		// Function Address
                		        8'd18,		// Expected payload size
                                o_pid
                	        );
            end
            else
            begin
                if(o_pid==`USBF_T_PID_STALL)
                begin
                    $display("rececve STALL and soft not support");
                end
                else
                begin
                    // Status OK
                    data_out(	8'h07,		// Function Address
                    		    8'h0		// Expected payload size
                    	    );
                    $display("index(%d) Status OK",index_tmp);
                end
                break;
            end
            index_tmp++;
        end
        o_pid=`USBF_T_PID_NACK;
        index_tmp = 0;
    end
end
//#4ms;
//$display("\n\nGetting Lang String descriptor ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h300,	// wValue
//		    16'h0,		// wIndex
//		    16'd4		// wLength
//		    );
//#7ms;
//data_in(	8'h07,		// Function Address
//		    8'd4		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//#4ms;
//$display("\n\nGetting Vendor String descriptor ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h301,	// wValue
//		    16'h0,		// wIndex
//		    16'h26		// wLength
//		    );
//#14ms;
//data_in(	8'h07,		// Function Address
//		    8'h26		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//#4ms;
//$display("\n\nGetting Product String descriptor ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h302,	// wValue
//		    16'h0,		// wIndex
//		    16'h3C		// wLength
//		    );
//#15ms;
//data_in(	8'h07,		// Function Address
//		    8'h3C		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//#4ms;
//$display("\n\nGetting Serial String descriptor ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h303,	// wValue
//		    16'h0,		// wIndex
//		    16'h14		// wLength
//		    );
//#10ms;
//data_in(	8'h07,		// Function Address
//		    8'h14		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//
//
//
//
#100us;
$display("\n\nSetting Configuration ...");

send_setup(	8'h07, 		// Function Address
		    8'h00,		// Request Type
		    SET_CONFIG,	// Request
		    16'h01,	    // wValue
		    16'h0,		// wIndex
		    16'h0		// wLength
		  );
#12us;
// Status OK
data_in(	8'h07,		// Function Address
		    8'h0		// Expected payload size
	   );
//o_pid=`USBF_T_PID_NACK;
//index_tmp = 0;
//repeat(20)
//begin
//    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
//    if(o_pid==`USBF_T_PID_NACK)
//    begin
//        data_in_new(	8'h07,		// Function Address
//        		        8'd00,		// Expected payload size
//                        o_pid
//        	        );
//    end
//    else
//    begin
//        break;
//    end
//    index_tmp++;
//end
//o_pid=`USBF_T_PID_NACK;
//index_tmp = 0;

#100us;

//$display("\n\n");
//$display("*****************************************************");
//$display("*** CDC OPERATION TEST                         ***");
//$display("*****************************************************\n");
//
//#4ms;
//$display("\n\nGET_LINE_CODING ...");
//
//send_setup(	8'h07, 		// Function Address
//		    8'hA1,		// Request Type
//		    GET_LINE_CODING,	// Request
//		    16'h00,	// wValue
//		    16'h0,		// wIndex
//		    16'h7		// wLength
//		  );
//#3ms;
//// data_in
//data_in(	8'h07,		// Function Address
//		    8'h7		// Expected payload size
//	   );
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//#3ms;
//$display("\n\nGET_LINE_CODING ...");
//
//send_setup(	8'h07, 		// Function Address
//		    8'hA1,		// Request Type
//		    GET_LINE_CODING,	// Request
//		    16'h00,	// wValue
//		    16'h0,		// wIndex
//		    16'h7		// wLength
//		  );
//#3ms;
//// data_in
//data_in(	8'h07,		// Function Address
//		    8'h7		// Expected payload size
//	   );
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//#3ms;
//$display("\n\nSET_LINE_CODING ...");
//
//send_setup(	8'h07, 		// Function Address
//		    8'h21,		// Request Type
//		    SET_LINE_CODING,	// Request
//		    16'h00,	// wValue
//		    16'h0,		// wIndex
//		    16'h7		// wLength
//		  );
//#3ms;
//// data_out 
//data_out_buffer(	8'h07,		// Function Address
//		            8'h7,		// Expected payload size
//                    8'h0, 
//                    8'hc1,
//                    8'h1, 
//                    8'h0,
//                    8'h0, 
//                    8'h0,
//                    8'h0
//	           );
//
//#3ms;
//setup_pid = 1;
//// data_in_for_ack
//data_in(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	   );
//
//#3ms;
//$display("\n\n  SET_CTRL_LINE_STATE_0 ...");
//
//send_setup(	8'h07, 		// Function Address
//		    8'h21,		// Request Type
//		    SET_CTRL_LINE_STATE,	// Request
//		    16'h00,	    // wValue
//		    16'h0,		// wIndex
//		    16'h0		// wLength
//		  );
//#3ms;
//// Status OK
//data_in(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	   );
//
//
//#7ms;
#500us;
$display("\n\n");
$display("*****************************************************");
$display("*** CDC OUT DATA TEST                             ***");
$display("*****************************************************\n");
no_pack_max = 1;	// Number Of packets to transfer
pl_sz_max   = 128;	// Payload Size

no_pack = 0;		// Number Of packets to transfer
pl_sz = 64;
my_fa = 7'h07;

pid = 0;

$display("PL size: %0d", pl_sz);

for(n=0;n<4096;n=n+1)
	//buffer1[n] = $random;
	buffer1[n] = n;

buffer1_last = 0;


for(no_pack=0;no_pack<no_pack_max;no_pack=no_pack+1)	// Send no_pack Out packets
begin
	repeat(1)	@(posedge usb_phy_clk);
	send_sof(11'h000 );	// Send SOF
	repeat(1)	@(posedge usb_phy_clk);

	send_token(	my_fa,		// Function Address
			1,		        // Logical Endpoint Number
			`USBF_T_PID_OUT	// PID
			);

	repeat(1)	@(posedge usb_phy_clk);

	if(pid==0)	send_data(`USBF_T_PID_DATA0, pl_sz, 1);
	else		send_data(`USBF_T_PID_DATA1, pl_sz, 1);

	pid = ~pid;

	// Wait for ACK
	utmi_recv_pack(len);
end

//#25ms;
//#500us;
#1800us;
$display("\n\n");
$display("*****************************************************");
$display("*** CDC IN DATA TEST                             ***");
$display("*****************************************************\n");
//data_in_ep(	8'h07,		// Function Address
//		    8'h40,		    // Expected payload size
//            8'h1          // EP NUM
//	      );

o_pid=`USBF_T_PID_NACK;
index_tmp = 0;
repeat(100)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_ep_new(	8'h07,		// Function Address
        		        8'd64,		// Expected payload size
                        8'h2,       // EP NUM
                        o_pid
        	        );
    end
    else
    begin
        //// Status OK
        //data_out(	8'h00,		// Function Address
        //		    8'h0		// Expected payload size
        //	    );
        break;
    end
    index_tmp++;
end
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;

//#3ms;
//$display("\n\n");
//$display("*****************************************************");
//$display("*** CDC CDC_DEMO_PUTCHAR TEST                         ***");
//$display("*****************************************************\n");
//data_in_buffer(	8'h07,		// Function Address
//		        8'h128,		// Expected payload size
//	            8'h1
//              );
//#5ms;
$display("\n\n");
$display("*****************************************************");
$display("*** DATA_IN_EP3_FINISH                             ***");
$display("*****************************************************\n");




end
endtask

//task in0;
//
//reg     [ 6: 0] my_fa;
//integer         quick, n, m, rlen,fc;
//reg     [ 7: 0] fd;
//integer         pack_cnt, pack_cnt_max;
//reg     [ 7: 0] x;
//reg     [ 3: 0] pid;
//reg     [ 3: 0] expect_pid;
//reg     [31: 0] data;
//reg             pid_cnt;
//
//begin
//
//    $display("\n\n");
//    $display("*****************************************************");
//    $display("*** IN ep test 0 (ISO_IN_EP1)                     ***");
//    $display("*****************************************************\n");
//
//    send_sof(11'h000 );     // Send SOF
//
//    pack_sz_max = 64;
//    pack_cnt_max = 4;
//
//    pid_cnt = 0;
//    my_fa = 7'h12;
//
//    for(pack_sz=0;pack_sz<pack_sz_max;pack_sz=pack_sz+1) begin
//
//        $display("PL size: %0d", pack_sz);
//
//        for(pack_cnt=0;pack_cnt<pack_cnt_max;pack_cnt=pack_cnt+1) begin
//            // Fill Buffer
//            buffer1_last = 0;
//            for(fc=0;fc<pack_sz;fc=fc+1) begin
////              SAHB_MODEL2.AHB_SINGLE_READ (32'h40013114, data);       // EP1 FIFO status
////              while(data[15]!==1'b0) begin                            // Check if TX FIFO is full
////                  SAHB_MODEL2.AHB_SINGLE_READ (32'h40013114, data);   // EP1 FIFO status
////              end
//
//                //x = fc[7:0];
//                x = $random;
//                SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40013118, {24'd0, x}); // EP1 FIFO push
//                buffer0[fc] = x;
//            end
//
//            // Send Data
//            repeat(1) @(posedge usb_phy_clk);
//            send_sof(11'h000 );                 // Send SOF
//            repeat(1) @(posedge usb_phy_clk);
//            send_token(
//                my_fa,                          // Function Address
//                1,                              // Logical Endpoint Number
//                `USBF_T_PID_IN                  // PID
//            );
//
//            repeat(1) @(posedge usb_phy_clk);
//
//            recv_packet(pid,rlen);
//
//            if(pid_cnt) expect_pid = 4'hb;
//            else        expect_pid = 4'h3;
//            expect_pid = 4'h3;
//
//            if(pid !== expect_pid) begin
//                $display("ERROR: PID mismatch. Expected: %h, Got: %h (%t)", expect_pid, pid, $time);
//                error_cnt = error_cnt + 1;
//            end
//            pid_cnt = ~pid_cnt;
//
//            if(rlen != pack_sz) begin
//                $display("ERROR: Size mismatch. Expected: %d, Got: %d (%t)", pack_sz, rlen, $time);
//                error_cnt = error_cnt + 1;
//            end
//
//            repeat(5) @(posedge usb_phy_clk);
//
//            // Verify Data
//            for(fc=0;fc<pack_sz;fc=fc+1) begin
//                x =  buffer0[fc];
//                if( (buffer1[fc] !== x) | ( (^buffer1[fc] ^ ^x) === 1'hx) ) begin
//                    $display("ERROR: Data (%0d) mismatch. Expected: %h, Got: %h (%t)", fc, buffer1[fc], x, $time);
//                    error_cnt = error_cnt + 1;
//                end
//            end
//        end
//
//        repeat(50) @(posedge usb_phy_clk);
//    end
//
//    show_errors;
//    $display("*****************************************************");
//    $display("*** Test DONE ...                                 ***");
//    $display("*****************************************************\n\n");
//
//end
//
//endtask
//
//
//
//task out0;
//
//reg     [ 6: 0] my_fa;
//reg     [31: 0] data;
//integer         len, n, no_pack, pl_sz;
//integer         no_pack_max, pl_sz_max;
//reg             pid;
//
//reg     [ 7: 0] x;
//
//begin
//    $display("\n\n");
//    $display("*****************************************************");
//    $display("*** OUT ep test 0 (BULK_OUT_EP4)                  ***");
//    $display("*****************************************************\n");
//
//
//    no_pack_max = 4;    // Number Of packets to transfer
//    pl_sz_max   = 128;  // Payload Size
//
//    no_pack = 4;        // Number Of packets to transfer
//    pl_sz = 0;
//    my_fa = 7'h12;
//
//
//    for(pl_sz=0;pl_sz<pl_sz_max;pl_sz=pl_sz+4) begin
//        pid = 0;
//
//        $display("PL size: %0d", pl_sz);
//
//        for(n=0;n<4096;n=n+1) begin
//            buffer1[n] = $random;
//            //buffer1[n] = n;
//        end
//
//        buffer1_last = 0;
//
//        fork
//            // Send no_pack Out packets
//            for(no_pack=0;no_pack<no_pack_max;no_pack=no_pack+1) begin
//                repeat(1) @(posedge usb_phy_clk);
//                send_sof(11'h000 );         // Send SOF
//                repeat(1) @(posedge usb_phy_clk);
//
//                send_token(
//                    my_fa,                  // Function Address
//                    4,                      // Logical Endpoint Number
//                    `USBF_T_PID_OUT         // PID
//                );
//
//                repeat(1) @(posedge usb_phy_clk);
//
//                if(pid==0)  send_data(`USBF_T_PID_DATA0, pl_sz, 1);
//                else        send_data(`USBF_T_PID_DATA1, pl_sz, 1);
//
//                pid = ~pid;
//
//                // Wait for ACK
//                utmi_recv_pack(len);
//
//                if(8'hd2 !== txmem[0]) begin
//                    $display("ERROR: ACK mismatch. Expected: %h, Got: %h (%t)", 8'hd2, txmem[0], $time);
//                    error_cnt = error_cnt + 1;
//                end
//
//                repeat(1) @(posedge usb_phy_clk);
//            end
//
//            begin
//                repeat(10) @(posedge usb_core_clk);
//                // Compare Buffers
//                for(n=0;n<(no_pack_max*pl_sz);n=n+1) begin
//
//                    SAHB_MODEL2.AHB_SINGLE_READ (32'h40013144, data);       // EP4 FIFO status
//                    while(data[30]!==1'b0) begin                            // Check if RX FIFO is valid
//                        SAHB_MODEL2.AHB_SINGLE_READ (32'h40013144, data);   // EP4 FIFO status
//                    end
//                    SAHB_MODEL2.AHB_SINGLE_READ (32'h4001314C, data);       // EP4 FIFO pop
//
//                    if(buffer1[n] !== data[7:0]) begin
//                        $display("ERROR: DATA mismatch. Expected: %h, Got: %h (%t)", buffer1[n], data[7:0], $time);
//                        error_cnt = error_cnt + 1;
//                    end
//                end
//            end
//
//        join
//
//        repeat(1) @(posedge usb_phy_clk);
//    end
//
//    show_errors;
//    $display("*****************************************************");
//    $display("*** Test DONE ...                                 ***");
//    $display("*****************************************************\n\n");
//end
//
//endtask
//
//
//// =================================================================
//task in0_dma;
//
//reg     [ 6: 0] my_fa;
//integer         quick, n, m, rlen,fc;
//reg     [ 7: 0] fd;
//integer         pack_cnt, pack_cnt_max;
//reg     [ 7: 0] x;
//reg     [ 3: 0] pid;
//reg     [ 3: 0] expect_pid;
//reg     [31: 0] data;
//reg             pid_cnt;
//
//reg     [31: 0] addr;
//reg     [31: 0] rdata;
//
//begin
//
//    $display("\n\n");
//    $display("*****************************************************");
//    $display("*** IN ep test 0 (ISO_IN_EP1), DMA mode           ***");
//    $display("*****************************************************\n");
//
//    // DMA enable
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40007030,32'h1);                   // SMDMAC enable
//
//    // USB EP1 FIFO TX req/ack enable
//    SAHB_MODEL2.AHB_SINGLE_READ (32'h40013110, rdata);
//    rdata[0] = 1'b1;
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40013110, rdata);
//
//    // Prepare data in OCRAM
//    pack_sz = 64;
//    for(fc = 0; fc < pack_sz; fc = fc + 1) begin
//        addr = 32'h50000000 + fc*4;
//        //x = fc[7:0];
//        x = {$random};
//        SAHB_MODEL2.AHB_SINGLE_WRITE(addr, {24'd0, x});
//        buffer0[fc] = x;
//    end
//
//
//    send_sof(11'h000 );     // Send SOF
//
//    pid_cnt = 0;
//    my_fa = 7'h12;
//
//    $display("PL size: %0d", pack_sz);
//
//    // Fill Buffer
//    buffer1_last = 0;
//
//    // Enable DMA
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40007200,32'h50000000);             // SrcAddr : OCRAM
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40007204,32'h40013118);             // DstAddr : USB EP1 TX FIFO
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h4000720c,{1'b1,3'b0,1'b0,1'b1,2'b0,3'd2,3'd2,3'd0,3'd0,pack_sz[11:0]}); // SI, DBSize SBSize TransferSize
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40007210,{18'd0,3'd1,5'd25,5'd0,1'b1}); // FlowCntrl=M2P, DstPeripheral=25, Channel enable
//
//    // Send Data
//    repeat(1) @(posedge usb_phy_clk);
//    send_sof(11'h000 );                 // Send SOF
//    repeat(1) @(posedge usb_phy_clk);
//    send_token(
//        my_fa,                          // Function Address
//        1,                              // Logical Endpoint Number
//        `USBF_T_PID_IN                  // PID
//    );
//
//    repeat(1) @(posedge usb_phy_clk);
//
//    recv_packet(pid,rlen);
//
//    if(pid_cnt) expect_pid = 4'hb;
//    else        expect_pid = 4'h3;
//    expect_pid = 4'h3;
//
//    if(pid !== expect_pid) begin
//        $display("ERROR: PID mismatch. Expected: %h, Got: %h (%t)", expect_pid, pid, $time);
//        error_cnt = error_cnt + 1;
//    end
//    pid_cnt = ~pid_cnt;
//
//    if(rlen != pack_sz) begin
//        $display("ERROR: Size mismatch. Expected: %d, Got: %d (%t)", pack_sz, rlen, $time);
//        error_cnt = error_cnt + 1;
//    end
//
//    repeat(5) @(posedge usb_phy_clk);
//
//    // Verify Data
//    for(fc=0;fc<pack_sz;fc=fc+1) begin
//        x =  buffer0[fc];
//        if( (buffer1[fc] !== x) | ( (^buffer1[fc] ^ ^x) === 1'hx) ) begin
//            $display("ERROR: Data (%0d) mismatch. Expected: %h, Got: %h (%t)", fc, buffer1[fc], x, $time);
//            error_cnt = error_cnt + 1;
//        end
//    end
//
//    repeat(50) @(posedge usb_phy_clk);
//
//    show_errors;
//    $display("*****************************************************");
//    $display("*** Test DONE ...                                 ***");
//    $display("*****************************************************\n\n");
//
//end
//
//endtask
//
//
//// =================================================================
//task out0_dma;
//
//reg     [ 6: 0] my_fa;
//reg     [31: 0] data;
//integer         len, n, no_pack, pl_sz;
//integer         no_pack_max, pl_sz_max;
//reg             pid;
//
//reg     [ 7: 0] x;
//
//reg     [31: 0] addr;
//reg     [31: 0] rdata;
//
//begin
//    $display("\n\n");
//    $display("*****************************************************");
//    $display("*** OUT ep test 0 (BULK_OUT_EP4), DMA mode        ***");
//    $display("*****************************************************\n");
//
//    // DMA enable
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40007030,32'h1);                   // SMDMAC enable
//
//    // USB EP4 FIFO RX req/ack enable
//    SAHB_MODEL2.AHB_SINGLE_READ (32'h40013140, rdata);
//    rdata[1] = 1'b1;
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40013140, rdata);
//
//    pl_sz = 128;
//    my_fa = 7'h12;
//
//
//    pid = 0;
//
//    $display("PL size: %0d", pl_sz);
//
//    for(n=0;n<4096;n=n+1) begin
//        buffer1[n] = $random;
//        //buffer1[n] = n;
//    end
//
//    buffer1_last = 0;
//
//    // Enable DMA
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40007200,32'h4001314C);             // SrcAddr : USB EP4 RX FIFO
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40007204,32'h50000000);             // DstAddr : OCRAM
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h4000720c,{1'b1,3'b0,1'b1,1'b0,2'b0,3'd2,3'd2,3'd0,3'd0,pl_sz[11:0]}); // SI, DBSize SBSize TransferSize
//    SAHB_MODEL2.AHB_SINGLE_WRITE(32'h40007210,{18'd0,3'd2,5'd0,5'd28,1'b1}); // FlowCntrl=P2M, SrcPeripheral=28, Channel enable
//
//    // Send Out packets
//    repeat(1) @(posedge usb_phy_clk);
//    send_sof(11'h000 );         // Send SOF
//    repeat(1) @(posedge usb_phy_clk);
//
//    send_token(
//        my_fa,                  // Function Address
//        4,                      // Logical Endpoint Number
//        `USBF_T_PID_OUT         // PID
//    );
//
//    repeat(1) @(posedge usb_phy_clk);
//
//    if(pid==0)  send_data(`USBF_T_PID_DATA0, pl_sz, 1);
//    else        send_data(`USBF_T_PID_DATA1, pl_sz, 1);
//
//    pid = ~pid;
//
//    // Wait for ACK
//    utmi_recv_pack(len);
//
//    if(8'hd2 !== txmem[0]) begin
//        $display("ERROR: ACK mismatch. Expected: %h, Got: %h (%t)", 8'hd2, txmem[0], $time);
//        error_cnt = error_cnt + 1;
//    end
//
//    repeat(1) @(posedge usb_phy_clk);
//
//
//    // Compare Buffers
//    for(n = 0; n < pl_sz; n = n + 1) begin
//        addr = 32'h50000000 + n*4;
//        SAHB_MODEL2.AHB_SINGLE_READ (addr, data);
//        if(buffer1[n] !== data[7:0]) begin
//            $display("ERROR: DATA mismatch. Expected: %h, Got: %h (%t)", buffer1[n], data[7:0], $time);
//            error_cnt = error_cnt + 1;
//        end
//    end
//
//    repeat(1) @(posedge usb_phy_clk);
//
//    show_errors;
//    $display("*****************************************************");
//    $display("*** Test DONE ...                                 ***");
//    $display("*****************************************************\n\n");
//end
//
//endtask
task setup_msc;
reg             [ 6: 0] my_fa;
reg             [31: 0] data;
integer         len, n, no_pack, pl_sz;
integer         no_pack_max, pl_sz_max;
reg             pid;
reg	[3:0]	    o_pid;
reg             [ 7: 0] x;
integer         index_tmp;

// CBW
reg [7: 0]  operation_code;
reg [2: 0]  lun;
reg [1: 0]  EVPD;
reg [7: 0]  page_code;
reg [7: 0]  allocation_length;
reg [7:0]   CBWCB[12];
reg         RelAdr;
reg [31:0]  LBA;
reg         FUA;
reg         DPO;
reg [15:0]  Transfer_Len;
// CSW
reg [4: 0]  PDT;
reg         RMB;
reg [1: 0]  ISO_V;
reg [2: 0]  ECMA_V;
reg [2: 0]  ANSI_V;
reg [3: 0]  RDF;
reg [15: 0] VI;
reg [15: 0] PI;
reg [15: 0] PRL;


begin
$display("\n\n");
$display("*****************************************************");
$display("*** MSC ENUMERATION  TEST                         ***");
$display("*****************************************************\n");
$display("\n\nGetting descriptor (Device)...");
index_tmp = 0;
send_setup_new(	8'h00, 		// Function Address
		        8'h80,		// Request Type
		        GET_DESCRIPTOR,	// Request
		        16'h0100,	// wValue
		        16'h0,		// wIndex
		        16'h12,		// wLength
                o_pid
		  );

$display("\n\o_pid(%h)...",o_pid);
if(o_pid==`USBF_T_PID_NACK)
begin
    send_setup_new(	8'h00, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0100,	// wValue
    		        16'h0,		// wIndex
    		        16'h12,		// wLength
                    o_pid
    		  );
end

if(o_pid==`USBF_T_PID_NACK)
begin
    send_setup_new(	8'h00, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0100,	// wValue
    		        16'h0,		// wIndex
    		        16'h12,		// wLength
                    o_pid
    		  );
end


if(o_pid==`USBF_T_PID_NACK)
begin
    send_setup_new(	8'h00, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0100,	// wValue
    		        16'h0,		// wIndex
    		        16'h12,		// wLength
                    o_pid
    		  );
end


if(o_pid==`USBF_T_PID_NACK)
begin
    send_setup_new(	8'h00, 		// Function Address
    		        8'h80,		// Request Type
    		        GET_DESCRIPTOR,	// Request
    		        16'h0100,	// wValue
    		        16'h0,		// wIndex
    		        16'h12,		// wLength
                    o_pid
    		  );
end
o_pid=`USBF_T_PID_NACK;
repeat(200)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_new(	8'h00,		// Function Address
        		        8'd18,		// Expected payload size
                        o_pid
        	        );
    end
    else
    begin
        // Status OK
        data_out(	8'h00,		// Function Address
        		    8'h0		// Expected payload size
        	    );
        break;
    end
    index_tmp++;
end
$display("loop 1 finish (Host)...");
//send_setup_new(	8'h00, 		// Function Address
//		        8'h80,		// Request Type
//		        GET_DESCRIPTOR,	// Request
//		        16'h0100,	// wValue
//		        16'h0,		// wIndex
//		        16'h12,		// wLength
//                o_pid
//		  );
//o_pid=`USBF_T_PID_NACK;
//index_tmp = 0;
//repeat(20)
//begin
//    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
//    if(o_pid==`USBF_T_PID_NACK)
//    begin
//        data_in_new(	8'h00,		// Function Address
//        		        8'd18,		// Expected payload size
//                        o_pid
//        	        );
//    end
//    else
//    begin
//        // Status OK
//        data_out(	8'h00,		// Function Address
//        		    8'h0		// Expected payload size
//        	    );
//        break;
//    end
//    index_tmp++;
//end
//o_pid=`USBF_T_PID_NACK;
//index_tmp = 0;




$display("\n\nSetting Address ...");

send_setup(	8'h0, 		// Function Address
		    8'h00,		// Request Type
		    SET_ADDRESS,	// Request
		    16'h07,	// wValue
		    16'h0,		// wIndex
		    16'h0		// wLength
		  );

o_pid=`USBF_T_PID_NACK;
index_tmp = 0;
repeat(200)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_new(	8'h00,		// Function Address
        		        8'd00,		// Expected payload size
                        o_pid
        	        );
    end
    else
    begin
        break;
    end
    index_tmp++;
end
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;

#100us;
//$display("\n\nGetting descriptor (Device)...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h0100,	// wValue
//		    16'h0,		// wIndex
//		    16'h12		// wLength
//		  );
//#7ms;
//data_in(	8'h07,		// Function Address
//		    8'd18		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//#4ms;
//$display("\n\nGetting descriptor(Configuration) ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h0200,	// wValue
//		    16'h0,		// wIndex
//		    16'h09		// wLength
//		    );
//#7ms;
//data_in(	8'h07,		// Function Address
//		    8'd09		// Expected payload size
//	);
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//#4ms;
//$display("\n\nGetting descriptor((9+9+5+5+4+5+7+9+7+7=)67B Configuration&&Interface&&hdr_fun&&call_mgmt_fun&&acm_fun&&union&&Endpoint) ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h0200,	// wValue
//		    16'h0,		// wIndex
//		    16'd64		// wLength
//		    );
//#14ms;
//data_in(	8'h07,		// Function Address
//		    8'd064		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//#4ms;
//repeat(10)
//begin
//    $display("\n\nGetting dev_qualifier descriptor ...");
//    send_setup_new(	8'h07, 		// Function Address
//    		        8'h80,		// Request Type
//    		        GET_DESCRIPTOR,	// Request
//    		        16'h0600,	// wValue
//    		        16'h0,		// wIndex
//    		        16'd10,		// wLength
//                    o_pid
//    		    );
//    if(o_pid==`USBF_T_PID_STALL)
//    begin
//        $display("rececve STALL and soft not support");
//    end
//    else
//    begin
//        o_pid=`USBF_T_PID_NACK;       
//        index_tmp = 0;
//        repeat(20)                                                                 
//        begin
//            $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
//            if(o_pid==`USBF_T_PID_NACK)
//            begin
//                data_in_new(	8'h07,		// Function Address
//                		        8'd18,		// Expected payload size
//                                o_pid
//                	        );
//            end
//            else
//            begin
//                if(o_pid==`USBF_T_PID_STALL)
//                begin
//                    $display("rececve STALL and soft not support");
//                end
//                else
//                begin
//                    // Status OK
//                    data_out(	8'h07,		// Function Address
//                    		    8'h0		// Expected payload size
//                    	    );
//                    $display("index(%d) Status OK",index_tmp);
//                end
//                break;
//            end
//            index_tmp++;
//        end
//        o_pid=`USBF_T_PID_NACK;
//        index_tmp = 0;
//    end
//end
//#4ms;
//$display("\n\nGetting Lang String descriptor ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h300,	// wValue
//		    16'h0,		// wIndex
//		    16'd4		// wLength
//		    );
//#7ms;
//data_in(	8'h07,		// Function Address
//		    8'd4		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//#4ms;
//$display("\n\nGetting Vendor String descriptor ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h301,	// wValue
//		    16'h0,		// wIndex
//		    16'h26		// wLength
//		    );
//#14ms;
//data_in(	8'h07,		// Function Address
//		    8'h26		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//#4ms;
//$display("\n\nGetting Product String descriptor ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h302,	// wValue
//		    16'h0,		// wIndex
//		    16'h3C		// wLength
//		    );
//#15ms;
//data_in(	8'h07,		// Function Address
//		    8'h3C		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//#4ms;
//$display("\n\nGetting Serial String descriptor ...");
//send_setup(	8'h07, 		// Function Address
//		    8'h80,		// Request Type
//		    GET_DESCRIPTOR,	// Request
//		    16'h303,	// wValue
//		    16'h0,		// wIndex
//		    16'h14		// wLength
//		    );
//#10ms;
//data_in(	8'h07,		// Function Address
//		    8'h14		// Expected payload size
//	   );
//
//// Status OK
//data_out(	8'h07,		// Function Address
//		    8'h0		// Expected payload size
//	    );
//
//
//
//
//
#100us;
$display("\n\nSetting Configuration ...");

send_setup(	8'h07, 		// Function Address
		    8'h00,		// Request Type
		    SET_CONFIG,	// Request
		    16'h01,	    // wValue
		    16'h0,		// wIndex
		    16'h0		// wLength
		  );
#12us;
// Status OK
data_in(	8'h07,		// Function Address
		    8'h0		// Expected payload size
	   );
//o_pid=`USBF_T_PID_NACK;
//index_tmp = 0;
//repeat(20)
//begin
//    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
//    if(o_pid==`USBF_T_PID_NACK)
//    begin
//        data_in_new(	8'h07,		// Function Address
//        		        8'd00,		// Expected payload size
//                        o_pid
//        	        );
//    end
//    else
//    begin
//        break;
//    end
//    index_tmp++;
//end
//o_pid=`USBF_T_PID_NACK;
//index_tmp = 0;

#500us;
$display("\n\n");
$display("*****************************************************");
$display("*** MSC EP0 TEST                             ***");
$display("*****************************************************\n");
$display("\n\get_max_lun...");
index_tmp = 0;
send_setup_new(	8'h07, 		// Function Address
		        8'ha1,		// Request Type
		        GET_MAX_LUN,	// Request
		        16'h0100,	// wValue
		        16'h0,		// wIndex
		        16'h01,		// wLength
                o_pid
		  );

o_pid=`USBF_T_PID_NACK;
repeat(200)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_new(	8'h07,		// Function Address
        		        8'd1,		// Expected payload size
                        o_pid
        	        );
    end
    else
    begin
        // Status OK
        data_out(	8'h07,		// Function Address
        		    8'h0		// Expected payload size
        	    );
        break;
    end
    index_tmp++;
end
$display("get_max_lun finish...");



$display("\n\bulk_only_mass_storage_reset...");
index_tmp = 0;
send_setup_new(	8'h07, 		// Function Address
		        8'h21,		// Request Type
		        BULK_ONLY_MASS_STORAGE_RESET,	// Request
		        16'h0100,	// wValue
		        16'h0,		// wIndex
		        16'h01,		// wLength
                o_pid
		  );
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;
repeat(200)
begin
    //$display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_new(	8'h07,		// Function Address
        		        8'd00,		// Expected payload size
                        o_pid
        	        );
    end
    index_tmp++;
end
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;
$display("\n\bulk_only_mass_storage_reset finish...");
#20us;
$display("\n\n");
$display("*****************************************************");
$display("*** MSC SCSI TEST                             ***");
$display("*****************************************************\n");
$display("*****************************************************\n");
$display("\n\inquiry(0x12)...");
$display("*****************************************************\n");
operation_code  =   8'h12;
lun             =   0;
EVPD            =   0;
page_code       =   0;
allocation_length   = 36;

CBWCB[0]      = operation_code;
CBWCB[1]      = {lun,3'h0,EVPD};
CBWCB[2]      = page_code;
CBWCB[3]      = 8'h0;
CBWCB[4]      = allocation_length;
CBWCB[5]      = 8'h0;
CBWCB[6]      = 8'h0;
CBWCB[7]      = 8'h0;
CBWCB[8]      = 8'h0;
CBWCB[9]      = 8'h0;
CBWCB[10]     = 8'h0;
CBWCB[11]     = 8'h0;

pl_sz = 31;
my_fa = 7'h07;

{buffer1[3],buffer1[2],buffer1[1],buffer1[0]} = `BOT_CBW_SIGNATURE;
{buffer1[7],buffer1[6],buffer1[5],buffer1[4]} = `BOT_CBW_DTAG;
{buffer1[11],buffer1[10],buffer1[9],buffer1[8]} = 32'd36;
buffer1[12] = 8'h80;
buffer1[13] = 8'h0;
buffer1[14] = 8'd12;
buffer1[15] = CBWCB[0];
buffer1[16] = CBWCB[1];
buffer1[17] = CBWCB[2];
buffer1[18] = CBWCB[3];
buffer1[19] = CBWCB[4];
buffer1[20] = CBWCB[5];
buffer1[21] = CBWCB[6];
buffer1[22] = CBWCB[7];
buffer1[23] = CBWCB[8];
buffer1[24] = CBWCB[9];
buffer1[25] = CBWCB[10];
buffer1[26] = CBWCB[11];
buffer1[27] = 8'h0;
buffer1[28] = 8'h0;
buffer1[29] = 8'h0;
buffer1[30] = 8'h0;
buffer1[31] = 8'h0;
buffer1_last = 0;
repeat(1)	@(posedge usb_phy_clk);
send_sof(11'h000 );	// Send SOF
repeat(1)	@(posedge usb_phy_clk);
                                                    
send_token(	my_fa,		// Function Address
		3,		        // Logical Endpoint Number
		`USBF_T_PID_OUT	// PID
		);
                                                    
repeat(1)	@(posedge usb_phy_clk);
                                                    
send_data(`USBF_T_PID_DATA0, pl_sz, 1);
                                                    
// Wait for ACK
utmi_recv_pack(len);

$display("\n\inquiry(0x12) CBW SEND FINITSH...");



o_pid=`USBF_T_PID_NACK;
index_tmp = 0;
repeat(200)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_ep_new(	8'h07,		// Function Address
        		        8'd36,		// Expected payload size
                        8'h1,       // EP NUM
                        o_pid
        	        );
    end
    else
    begin
        //// Status OK
        //data_out(	8'h00,		// Function Address
        //		    8'h0		// Expected payload size
        //	    );
        break;
    end
    index_tmp++;
end
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;

$display("\n\inquiry(0x12) GET RESPONE FINITSH...");


o_pid=`USBF_T_PID_NACK;
index_tmp = 0;
repeat(2000)
begin
    $display("index(%d) rev o_pid is %h (Host)...",index_tmp,o_pid);
    if(o_pid==`USBF_T_PID_NACK)
    begin
        data_in_ep_new(	8'h07,		// Function Address
        		        8'd13,		// Expected payload size
                        8'h1,       // EP NUM
                        o_pid
        	        );
    end
    else
    begin
        //// Status OK
        //data_out(	8'h00,		// Function Address
        //		    8'h0		// Expected payload size
        //	    );
        break;
    end
    index_tmp++;
end
o_pid=`USBF_T_PID_NACK;
index_tmp = 0;

$display("\n\inquiry(0x12) CSW RECEIVE FINITSH...");


//$display("*****************************************************\n");
//$display("\n\SCSI_TestUnitReady_Cmdy(0x00)...");
//$display("*****************************************************\n");
//operation_code  =   8'h00;
//lun             =   0;
//EVPD            =   0;
//page_code       =   0;
//allocation_length   = 0;
//
//CBWCB[0]      = operation_code;
//CBWCB[1]      = {lun,3'h0,EVPD};
//CBWCB[2]      = page_code;
//CBWCB[3]      = 8'h0;
//CBWCB[4]      = allocation_length;
//CBWCB[5]      = 8'h0;
//CBWCB[6]      = 8'h0;
//CBWCB[7]      = 8'h0;
//CBWCB[8]      = 8'h0;
//CBWCB[9]      = 8'h0;
//CBWCB[10]     = 8'h0;
//CBWCB[11]     = 8'h0;
//
//pl_sz = 31;
//my_fa = 7'h07;
//
//{buffer1[3],buffer1[2],buffer1[1],buffer1[0]} = `BOT_CBW_SIGNATURE;
//{buffer1[7],buffer1[6],buffer1[5],buffer1[4]} = `BOT_CBW_DTAG;
//{buffer1[11],buffer1[10],buffer1[9],buffer1[8]} = 32'd0;
//buffer1[12] = 8'h80;
//buffer1[13] = 8'h0;
//buffer1[14] = 8'd12;
//buffer1[15] = CBWCB[0];
//buffer1[16] = CBWCB[1];
//buffer1[17] = CBWCB[2];
//buffer1[18] = CBWCB[3];
//buffer1[19] = CBWCB[4];
//buffer1[20] = CBWCB[5];
//buffer1[21] = CBWCB[6];
//buffer1[22] = CBWCB[7];
//buffer1[23] = CBWCB[8];
//buffer1[24] = CBWCB[9];
//buffer1[25] = CBWCB[10];
//buffer1[26] = CBWCB[11];
//buffer1[27] = 8'h0;
//buffer1[28] = 8'h0;
//buffer1[29] = 8'h0;
//buffer1[30] = 8'h0;
//buffer1[31] = 8'h0;
//buffer1_last = 0;
//repeat(1)